// @generated by protobuf-ts 2.7.0
// @generated from protobuf file "heartbeat.proto" (syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Heartbeat } from "./heartbeat";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { HeartbeatResponse } from "./heartbeat";
import type { HeartbeatRequest } from "./heartbeat";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service Heartbeat
 */
export interface IHeartbeatClient {
    /**
     * @generated from protobuf rpc: GetHeartbeat(HeartbeatRequest) returns (HeartbeatResponse);
     */
    getHeartbeat(input: HeartbeatRequest, options?: RpcOptions): UnaryCall<HeartbeatRequest, HeartbeatResponse>;
}
/**
 * @generated from protobuf service Heartbeat
 */
export class HeartbeatClient implements IHeartbeatClient, ServiceInfo {
    typeName = Heartbeat.typeName;
    methods = Heartbeat.methods;
    options = Heartbeat.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetHeartbeat(HeartbeatRequest) returns (HeartbeatResponse);
     */
    getHeartbeat(input: HeartbeatRequest, options?: RpcOptions): UnaryCall<HeartbeatRequest, HeartbeatResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<HeartbeatRequest, HeartbeatResponse>("unary", this._transport, method, opt, input);
    }
}
